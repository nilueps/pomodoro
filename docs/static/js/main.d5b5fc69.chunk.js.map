{"version":3,"sources":["bell.ogg","deepbell.ogg","helpers.js","components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","zeroPad","int","toString","getHumanTime","time","hours","minutes","seconds","format","Date","getHours","getMinutes","getSeconds","Math","floor","result","includes","push","twelveHour","indexOf","i","length","join","millisecs","m","Incrementer","props","idLabel","label","idValue","labelText","toUpperCase","slice","className","id","onClick","e","callback","value","Controls","icon","isRunning","faPause","faPlay","faUndoAlt","Timer","lastMinute","timeLeft","blockDots","blocks","map","v","key","fasCircle","farCircle","status","Stats","settings","timer","stats","timeBlock","sessionLength","breakLength","fullBlocksLeft","max","reduce","a","c","totalTimeLeft","now","sessionsCompleted","timeElapsed","INITIAL_STATE","lastStatus","App","changeSettings","state","currentTarget","min","unshift","shift","setState","playPauseReset","bind","this","timerID","setInterval","tic","clearInterval","bell","currentTime","play","beep","src","type","ref","audio","deepBell","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,uPCA3C,SAASC,EAAQC,GACf,OAAOA,EAAM,EAAIA,EAAIC,WAAa,IAAMD,EAEnC,SAASE,EAAaC,GAAyB,IAChDC,EAAOC,EAASC,EADaC,EAAkB,uDAAT,QAEtCJ,aAAgBK,MAClBJ,EAAQD,EAAKM,WACbJ,EAAUN,EAAQI,EAAKO,cACvBJ,EAAUP,EAAQI,EAAKQ,gBAEvBP,EAAQQ,KAAKC,MAAMV,EAAO,IAAO,GAAK,IAAIF,WAC1CI,EAAUN,EAAQa,KAAKC,MAAOV,EAAO,IAAO,GAAM,KAClDG,EAAUP,EAAQa,KAAKC,MAAOV,EAAO,IAAQ,MAE/C,IAAIW,EAAS,GAMb,GAHIP,EAAOQ,SAAS,MAAMD,EAAOE,KAAKZ,GAClCG,EAAOQ,SAAS,MAAMD,EAAOE,KAAKX,GAClCE,EAAOQ,SAAS,MAAMD,EAAOE,KAAKV,GAClCC,EAAOQ,SAAS,KAAM,CACxB,IAAIE,EAAab,EAAQ,GACzBU,EAAOA,EAAOI,QAAQd,IAAyB,IAAfa,EAAmB,GAAKA,EACxD,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAOM,OAAS,EAAGD,IACrCL,EAAOK,IAAM,IAEff,EAAQ,GAAKU,EAAOE,KAAK,OAASF,EAAOE,KAAK,YACzC,GAAIT,EAAOQ,SAAS,KACzB,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAOM,OAAS,EAAGD,IACrCL,EAAOK,IAAM,SAGfL,EAAOA,EAAOI,QAAQd,KAAW,IACjCU,EAAOA,EAAOI,QAAQb,KAAa,IACnCS,EAAOA,EAAOI,QAAQZ,KAAa,IAErC,OAAOQ,EAAOO,KAAK,IAGd,SAASC,EAAUC,GACxB,OAAW,IAAJA,E,0BClCF,SAASC,EAAYC,GAG1B,IAAMC,EAAUD,EAAME,MAAQ,SACxBC,EAAUH,EAAME,MAAQ,SACxBE,EACJJ,EAAME,MAAM,GAAGG,cAAgBL,EAAME,MAAMI,MAAM,IAAsB,WAAhBN,EAAME,MAAqB,UAAY,IAChG,OACE,yBAAKK,UAAU,eACb,yBAAKA,UAAU,QAAQC,GAAIP,GACxBG,GAEH,yBAAKG,UAAU,UACb,yBAAKA,UAAU,SAASC,GAAIR,EAAME,MAAOO,QAAS,SAAAC,GAAC,OAAIV,EAAMW,SAAS,EAAGD,KAAzE,KAGA,yBAAKH,UAAU,WAAWC,GAAIR,EAAME,MAAOO,QAAS,SAAAC,GAAC,OAAIV,EAAMW,UAAU,EAAGD,KAA5E,WAIF,yBAAKH,UAAU,SAASC,GAAIL,GACzBH,EAAMY,QAKR,SAASC,EAASb,GACvB,OACE,yBAAKO,UAAU,YACb,yBAAKA,UAAU,MAAMC,GAAG,YAAYC,QAAST,EAAMW,UACjD,kBAAC,IAAD,CAAiBG,KAAMd,EAAMe,UAAYC,IAAUC,OAErD,yBAAKV,UAAU,MAAMC,GAAG,QAAQC,QAAST,EAAMW,UAC7C,kBAAC,IAAD,CAAiBG,KAAMI,QAKxB,SAASC,EAAMnB,GAEpB,IAAMoB,KAAapB,EAAMe,WAAaf,EAAMqB,SAAW,KACjDC,EAAYtB,EAAMuB,OAAOC,KAAI,SAACC,EAAG/B,GACrC,OAAO+B,EACL,kBAAC,IAAD,CAAiBC,IAAKhC,EAAGoB,KAAMa,MAE/B,kBAAC,IAAD,CAAiBD,IAAKhC,EAAGoB,KAAMc,SAGnC,OACE,yBAAKrB,UAAW,SAAWa,EAAa,aAAe,KACrD,yBAAKb,UAAU,cAAcC,GAAG,eAC7BR,EAAM6B,OAAO,GAAGxB,cAAgBL,EAAM6B,OAAOvB,MAAM,IAEtD,yBAAKC,UAAU,YAAYC,GAAG,aAC3B/B,EAAauB,EAAMqB,SAAU,QAEhC,yBAAKd,UAAU,kBAAkBe,IAIhC,SAASQ,EAAM9B,GAAQ,IACtB+B,EAA2B/B,EAA3B+B,SAAUC,EAAiBhC,EAAjBgC,MAAOC,EAAUjC,EAAViC,MACjBC,EAAYrC,EAAUkC,EAASI,cAAgBJ,EAASK,aACxDC,EAAiBlD,KAAKmD,IAAI,EAAGP,EAASR,OAAOgB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAK,GACzEC,EAAgBV,EAAMX,SAAWgB,EAAiBH,EAEtD,MADqB,UAAjBF,EAAMH,SAAoBa,GAAiB7C,EAAUkC,EAASK,cAEhE,yBAAK7B,UAAU,SACb,sDAA4B9B,EAAaiE,EAAe,OACxD,+CAAqBjE,EAAa,IAAIM,KAAKA,KAAK4D,MAAQD,GAAgB,SACxE,6BACA,oDAA0BT,EAAMW,mBAChC,oDAA0BnE,EAAawD,EAAMY,YAAa,QCtEhE,IAAMC,EAAgB,CACpBf,SAAU,CACRK,YAAa,EACbD,cAAe,GACfZ,OAAQ,CAAC,EAAG,EAAG,EAAG,IAEpBS,MAAO,CACLH,OAAQ,QACRkB,WAAY,GACZ1B,SAAU,EACVN,WAAW,GAEbkB,MAAO,CACLY,YAAa,EACbD,kBAAmB,IA4KRI,E,kDAvKb,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IAWRiD,eAAiB,SAACvD,EAAGgB,GAAO,IAAD,EACC,EAAKwC,MAAzBnB,EADmB,EACnBA,SAAUC,EADS,EACTA,MAChB,OAAQtB,EAAEyC,cAAc3C,IACtB,IAAK,UACHuB,EAASI,cAAgBzC,EAAI,EAAIP,KAAKiE,IAAI,GAAIrB,EAASI,cAAgBzC,GAAKP,KAAKmD,IAAI,EAAGP,EAASI,cAAgB,GAC5F,YAAjBH,EAAMH,QAAyC,UAAjBG,EAAMH,QAAuC,oBAAjBG,EAAMH,SAA8BG,EAAMX,SAAWxB,EAAUkC,EAASI,gBACtI,MACF,IAAK,QACHJ,EAASK,YAAc1C,EAAI,EAAIP,KAAKiE,IAAI,GAAIrB,EAASK,YAAc1C,GAAKP,KAAKmD,IAAI,EAAGP,EAASK,YAAc,GACtF,UAAjBJ,EAAMH,SAAoBG,EAAMX,SAAWxB,EAAUkC,EAASK,cAClE,MACF,IAAK,SACC1C,EAAI,EACFqC,EAASR,OAAO5B,OAAS,IAAIoC,EAASR,OAAO8B,QAAQ,GAErDtB,EAASR,OAAO5B,OAAS,GAAGoC,EAASR,OAAO+B,QAMtD,EAAKC,SAAS,CAAExB,WAAUC,WAjCT,EAmCnBwB,eAAiB,SAAA9C,GAAM,IAAD,EACa,EAAKwC,MAAhCnB,EADc,EACdA,SAAUC,EADI,EACJA,MAAOC,EADH,EACGA,MAEvB,OAAQvB,EAAEyC,cAAc3C,IACtB,IAAK,YAEH,OADAwB,EAAMjB,WAAaiB,EAAMjB,UACjBiB,EAAMH,QACZ,IAAK,QACL,IAAK,kBACHE,EAASR,OAASQ,EAASR,OAAOC,KAAI,SAAAC,GAAC,OAAI,KAC3CO,EAAMH,OAAS,UACfG,EAAMX,SAAWxB,EAAUkC,EAASI,eACpC,MACF,IAAK,UACL,IAAK,QACHH,EAAMe,WAAaf,EAAMH,OACzBG,EAAMH,OAAS,SACf,MACF,IAAK,SACHG,EAAMH,OAASG,EAAMe,WACrBf,EAAMe,WAAa,SACnB,MACF,QACE,OAGJ,YADA,EAAKQ,SAAS,CAAExB,WAAUC,UAE5B,IAAK,QAWH,MAVqB,UAAjBA,EAAMH,QACRI,EAAMY,YAAc,EACpBZ,EAAMW,kBAAoB,GAE1BZ,EAAMH,OAAS,QAEjBE,EAASR,OAASQ,EAASR,OAAOC,KAAI,SAAAC,GAAC,OAAI,KAC3CO,EAAMX,SAAWxB,EAAUkC,EAASI,eACpCH,EAAMjB,WAAY,OAClB,EAAKwC,SAAS,CAAExB,WAAUC,QAAOC,UAEnC,QACE,SAzEJ,EAAKiB,MAAQJ,EACb,EAAKU,eAAiB,EAAKA,eAAeC,KAApB,gBAHL,E,gEAKE,IAAD,OAClBC,KAAKC,QAAUC,aAAY,kBAAM,EAAKC,QAAO,KAC7CH,KAAKH,SAAS,CAAEvB,MAAM,eAAM0B,KAAKR,MAAMlB,MAAlB,CAAyBX,SAAUxB,EAAU6D,KAAKR,MAAMnB,SAASI,qB,6CAGtF2B,cAAcJ,KAAKC,W,4BAsEnB,GAAID,KAAKR,MAAMlB,MAAMjB,UAAW,CAAC,IAAD,EACG2C,KAAKR,MAAhCnB,EADwB,EACxBA,SAAUC,EADc,EACdA,MAAOC,EADO,EACPA,MACA,IAAnBD,EAAMX,SACa,YAAjBW,EAAMH,QACRI,EAAMW,mBAAqB,EACqB,IAA5Cb,EAASR,OAAOgB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,MACvCV,EAASR,OAAO,GAAK,EACrBS,EAAMjB,WAAY,EAClBiB,EAAMH,OAAS,kBACfG,EAAMX,SAAW,EACjBqC,KAAKK,KAAKC,YAAc,EACxBN,KAAKK,KAAKE,SAEVjC,EAAMH,OAAS,QACfG,EAAMX,SAAWxB,EAAUkC,EAASK,aACpCsB,KAAKQ,KAAKF,YAAc,EACxBN,KAAKQ,KAAKD,SAEc,UAAjBjC,EAAMH,SACXE,EAASR,OAAOQ,EAASR,OAAO5B,OAAS,GAC3CoC,EAASR,OAAOQ,EAASR,OAAO5B,OAAS,GAAK,EAE9CoC,EAASR,OAAOQ,EAASR,OAAO9B,QAAQ,GAAK,GAAK,EAEpDuC,EAAMH,OAAS,UACfG,EAAMX,SAAWxB,EAAUkC,EAASI,eACpCuB,KAAKQ,KAAKF,YAAc,EACxBN,KAAKQ,KAAKD,SAGZjC,EAAMX,UAAY,IACG,YAAjBW,EAAMH,SAAsBI,EAAMY,aAAe,MAEzDa,KAAKH,SAAS,CAAExB,WAAUC,QAAOC,a,+BAOzB,IAAD,OACP,OACE,yBAAK1B,UAAU,YACb,2BACEC,GAAG,OACH2D,IAAKJ,IACLK,KAAK,YACLC,IAAK,SAAAC,GACH,EAAKJ,KAAOI,KAGhB,2BACE9D,GAAG,OACH2D,IAAKI,IACLH,KAAK,YACLC,IAAK,SAAAC,GACH,EAAKP,KAAOO,KAGhB,yBAAK/D,UAAU,gBACb,kBAACR,EAAD,CACE2B,IAAI,IACJxB,MAAM,UACNU,MAAO8C,KAAKR,MAAMnB,SAASI,cAC3BxB,SAAU+C,KAAKT,iBAEjB,kBAAClD,EAAD,CACE2B,IAAI,IACJxB,MAAM,QACNU,MAAO8C,KAAKR,MAAMnB,SAASK,YAC3BzB,SAAU+C,KAAKT,iBAEjB,kBAAClD,EAAD,CACE2B,IAAI,IACJxB,MAAM,SACNU,MAAO8C,KAAKR,MAAMnB,SAASR,OAAO5B,OAClCgB,SAAU+C,KAAKT,kBAGnB,kBAACpC,EAAD,CAAUE,UAAW2C,KAAKR,MAAMlB,MAAMjB,UAAWJ,SAAU+C,KAAKF,iBAChE,kBAACrC,EAAD,iBAAWuC,KAAKR,MAAMlB,MAAtB,CAA6BT,OAAQmC,KAAKR,MAAMnB,SAASR,UACzD,kBAACO,EAAU4B,KAAKR,Y,GAlKNsB,IAAMC,WCdJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK1E,UAAU,eACf,kBAAC,EAAD,MACA,wCAAa,6BAAK,uBAAG2E,KAAK,wBAAR,cAGpBC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5b5fc69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.45dd5ea1.ogg\";","module.exports = __webpack_public_path__ + \"static/media/deepbell.204def96.ogg\";","function zeroPad(int) {\n  return int > 9 ? int.toString() : '0' + int\n}\nexport function getHumanTime(time, format = 'hms:a') {\n  let hours, minutes, seconds\n  if (time instanceof Date) {\n    hours = time.getHours()\n    minutes = zeroPad(time.getMinutes())\n    seconds = zeroPad(time.getSeconds())\n  } else {\n    hours = Math.floor(time / 1000 / 60 / 60).toString()\n    minutes = zeroPad(Math.floor((time / 1000 / 60) % 60))\n    seconds = zeroPad(Math.floor((time / 1000) % 60))\n  }\n  let result = []\n  //hours = 12\n\n  if (format.includes('h')) result.push(hours)\n  if (format.includes('m')) result.push(minutes)\n  if (format.includes('s')) result.push(seconds)\n  if (format.includes('a')) {\n    let twelveHour = hours % 12\n    result[result.indexOf(hours)] = twelveHour === 0 ? 12 : twelveHour\n    for (let i = 0; i < result.length - 1; i++) {\n      result[i] += ':'\n    }\n    hours < 13 ? result.push(' AM') : result.push(' PM')\n  } else if (format.includes(':')) {\n    for (let i = 0; i < result.length - 1; i++) {\n      result[i] += ':'\n    }\n  } else {\n    result[result.indexOf(hours)] += 'h'\n    result[result.indexOf(minutes)] += 'm'\n    result[result.indexOf(seconds)] += 's'\n  }\n  return result.join('')\n}\n\nexport function millisecs(m) {\n  return m * 60000\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPause, faUndoAlt, faCircle as fasCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faCircle as farCircle } from '@fortawesome/free-regular-svg-icons'\nimport { millisecs, getHumanTime } from './helpers'\n\nexport function Incrementer(props) {\n  // props include value to display, as well as a callback function\n  // to change that value stored in parent state\n  const idLabel = props.label + '-label'\n  const idValue = props.label + '-value'\n  const labelText =\n    props.label[0].toUpperCase() + props.label.slice(1) + (props.label !== 'blocks' ? ' Length' : '')\n  return (\n    <div className=\"incrementer\">\n      <div className=\"label\" id={idLabel}>\n        {labelText}\n      </div>\n      <div className=\"updown\">\n        <div className=\"btn up\" id={props.label} onClick={e => props.callback(1, e)}>\n          +\n        </div>\n        <div className=\"btn down\" id={props.label} onClick={e => props.callback(-1, e)}>\n          &ndash;\n        </div>\n      </div>\n      <div className=\"number\" id={idValue}>\n        {props.value}\n      </div>\n    </div>\n  )\n}\nexport function Controls(props) {\n  return (\n    <div className=\"controls\">\n      <div className=\"btn\" id=\"playPause\" onClick={props.callback}>\n        <FontAwesomeIcon icon={props.isRunning ? faPause : faPlay} />\n      </div>\n      <div className=\"btn\" id=\"reset\" onClick={props.callback}>\n        <FontAwesomeIcon icon={faUndoAlt} />\n      </div>\n    </div>\n  )\n}\nexport function Timer(props) {\n  // props include time left and current status (break or session)\n  const lastMinute = props.isRunning && props.timeLeft < 60000 ? true : false\n  const blockDots = props.blocks.map((v, i) => {\n    return v ? (\n      <FontAwesomeIcon key={i} icon={fasCircle} />\n    ) : (\n      <FontAwesomeIcon key={i} icon={farCircle} />\n    )\n  })\n  return (\n    <div className={'timer' + (lastMinute ? ' red-alert' : '')}>\n      <div className=\"timer-label\" id=\"timer-label\">\n        {props.status[0].toUpperCase() + props.status.slice(1)}\n      </div>\n      <div className=\"time-left\" id=\"time-left\">\n        {getHumanTime(props.timeLeft, 'ms:')}\n      </div>\n      <div className=\"blocks-display\">{blockDots}</div>\n    </div>\n  )\n}\nexport function Stats(props) {\n  let { settings, timer, stats } = props\n  const timeBlock = millisecs(settings.sessionLength + settings.breakLength)\n  const fullBlocksLeft = Math.max(0, settings.blocks.reduce((a, c) => a + c) - 1)\n  let totalTimeLeft = timer.timeLeft + fullBlocksLeft * timeBlock\n  if (timer.status === 'break') totalTimeLeft -= millisecs(settings.breakLength)\n  return (\n    <div className=\"stats\">\n      <div>Total time remaining: {getHumanTime(totalTimeLeft, 'hm')}</div>\n      <div>Series ends at {getHumanTime(new Date(Date.now() + totalTimeLeft), 'hm:a')}</div>\n      <hr />\n      <div>Sessions completed: {stats.sessionsCompleted}</div>\n      <div>Total session time: {getHumanTime(stats.timeElapsed, 'hm')}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport bell from './bell.ogg'\nimport deepBell from './deepbell.ogg'\nimport './App.css'\n\nimport { millisecs } from './helpers'\nimport { Incrementer, Controls, Timer, Stats } from './components'\n\nconst INITIAL_STATE = {\n  settings: {\n    breakLength: 5,\n    sessionLength: 25,\n    blocks: [1, 1, 1, 1],\n  },\n  timer: {\n    status: 'ready',\n    lastStatus: '',\n    timeLeft: 0,\n    isRunning: false,\n  },\n  stats: {\n    timeElapsed: 0,\n    sessionsCompleted: 0,\n  },\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE\n    this.playPauseReset = this.playPauseReset.bind(this)\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tic(), 1000)\n    this.setState({ timer: { ...this.state.timer, timeLeft: millisecs(this.state.settings.sessionLength) } })\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n  changeSettings = (i, e) => {\n    let { settings, timer } = this.state\n    switch (e.currentTarget.id) {\n      case 'session':\n        settings.sessionLength = i > 0 ? Math.min(60, settings.sessionLength + i) : Math.max(1, settings.sessionLength - 1)\n        if (timer.status === 'session' || timer.status === 'ready' || timer.status === 'series complete') timer.timeLeft = millisecs(settings.sessionLength)\n        break\n      case 'break':\n        settings.breakLength = i > 0 ? Math.min(60, settings.breakLength + i) : Math.max(1, settings.breakLength - 1)\n        if (timer.status === 'break') timer.timeLeft = millisecs(settings.breakLength)\n        break\n      case 'blocks':\n        if (i > 0) {\n          if (settings.blocks.length < 10) settings.blocks.unshift(1)\n        } else {\n          if (settings.blocks.length > 1) settings.blocks.shift()\n        }\n        break\n      default:\n        break\n    }\n    this.setState({ settings, timer })\n  }\n  playPauseReset = e => {\n    let { settings, timer, stats } = this.state\n    \n    switch (e.currentTarget.id) {\n      case 'playPause':\n        timer.isRunning = !timer.isRunning\n        switch (timer.status) {\n          case 'ready':\n          case 'series complete':\n            settings.blocks = settings.blocks.map(v => 1)\n            timer.status = 'session'\n            timer.timeLeft = millisecs(settings.sessionLength)\n            break\n          case 'session':\n          case 'break':\n            timer.lastStatus = timer.status\n            timer.status = 'paused'\n            break\n          case 'paused':\n            timer.status = timer.lastStatus\n            timer.lastStatus = 'paused'\n            break\n          default:\n            return\n        }\n        this.setState({ settings, timer })\n        return\n      case 'reset':\n        if (timer.status === 'ready') {\n          stats.timeElapsed = 0\n          stats.sessionsCompleted = 0\n        } else {\n          timer.status = 'ready'\n        }\n        settings.blocks = settings.blocks.map(v => 1)\n        timer.timeLeft = millisecs(settings.sessionLength)\n        timer.isRunning = false\n        this.setState({ settings, timer, stats })\n        return\n      default:\n        return\n    }\n  }\n  \n  tic() {\n    if (this.state.timer.isRunning) {\n      let { settings, timer, stats } = this.state\n      if (timer.timeLeft === 0) {\n        if (timer.status === 'session') {\n          stats.sessionsCompleted += 1\n          if (settings.blocks.reduce((a, c) => a + c) === 1) {\n            settings.blocks[0] = 0\n            timer.isRunning = false\n            timer.status = 'series complete'\n            timer.timeLeft = 0\n            this.bell.currentTime = 0\n            this.bell.play()\n          } else {\n            timer.status = 'break'\n            timer.timeLeft = millisecs(settings.breakLength)\n            this.beep.currentTime = 0\n            this.beep.play()\n          }\n        } else if (timer.status === 'break') {\n          if (settings.blocks[settings.blocks.length - 1]) {\n            settings.blocks[settings.blocks.length - 1] = 0\n          } else {\n            settings.blocks[settings.blocks.indexOf(0) - 1] = 0\n          }\n          timer.status = 'session'\n          timer.timeLeft = millisecs(settings.sessionLength)\n          this.beep.currentTime = 0\n          this.beep.play()\n        }\n      } else {\n        timer.timeLeft -= 1000\n        if (timer.status === 'session') stats.timeElapsed += 1000\n      }\n    this.setState({ settings, timer, stats })\n    }\n\n    \n    return\n  }\n\n  render() {\n    return (\n      <div className=\"pomodoro\">\n        <audio\n          id=\"beep\"\n          src={bell}\n          type=\"audio/ogg\"\n          ref={audio => {\n            this.beep = audio\n          }}\n        ></audio>\n        <audio\n          id=\"bell\"\n          src={deepBell}\n          type=\"audio/ogg\"\n          ref={audio => {\n            this.bell = audio\n          }}\n        ></audio>\n        <div className=\"incrementers\">\n          <Incrementer\n            key=\"0\"\n            label=\"session\"\n            value={this.state.settings.sessionLength}\n            callback={this.changeSettings}\n          />\n          <Incrementer\n            key=\"1\"\n            label=\"break\"\n            value={this.state.settings.breakLength}\n            callback={this.changeSettings}\n          />\n          <Incrementer\n            key=\"2\"\n            label=\"blocks\"\n            value={this.state.settings.blocks.length}\n            callback={this.changeSettings}\n          />\n        </div>\n        <Controls isRunning={this.state.timer.isRunning} callback={this.playPauseReset} />\n        <Timer {...this.state.timer} blocks={this.state.settings.blocks} />\n        <Stats {...this.state} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"app-wrapper\">\n    <App />\n    <p>created by<br/><a href=\"https://nilueps.net/\">nilueps</a></p>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}